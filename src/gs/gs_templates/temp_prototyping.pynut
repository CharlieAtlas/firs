function TempGetCompanies() {
    local result = []
    for (local i = 0; i <= GSCompany.COMPANY_LAST; i += 1) {
        if (GSCompany.ResolveCompanyID(i) != GSCompany.COMPANY_INVALID) {
            result.append(GSCompany.ResolveCompanyID(i));
        }
    }
    return result
}

function regions_test()
{
    ::test_regions <- {}
    local counter = 0;
    // don't create the areas inside the loop, it bloats RAM use horrifically and won't be garbage collected
    local circle_1 = AtlasCircle(GSMap.GetTileIndex(100, 100), 32);
    local circle_2 = AtlasCircle(GSMap.GetTileIndex(500, 100), 32);
    local circle_3 = AtlasCircle(GSMap.GetTileIndex(500, 500), 32);
    local circle_4 = AtlasCircle(GSMap.GetTileIndex(100, 500), 32);
    local circle_5 = AtlasCircle(GSMap.GetTileIndex(200, 500), 32);
    local circle_6 = AtlasCircle(GSMap.GetTileIndex(200, 500), 32);
    local circle_7 = AtlasCircle(GSMap.GetTileIndex(200, 500), 32);
    local rect_1 = AtlasRect(GSMap.GetTileIndex(0, 0), GSMap.GetTileIndex(300, 300));
    local exclusion_circle_1 = AtlasCircle(GSMap.GetTileIndex(300, 300), 32);
    local exclusion_circle_2 = AtlasCircle(GSMap.GetTileIndex(100, 100), 32);
    local exclusion_circle_3 = AtlasCircle(GSMap.GetTileIndex(300, 300), 32);
    local exclusion_circle_4 = AtlasCircle(GSMap.GetTileIndex(400, 400), 32);
    do {
        ::test_regions[counter] <- Region();
        ::test_regions[counter].AddArea(rect_1);
        ::test_regions[counter].AddArea(circle_1);
        ::test_regions[counter].AddArea(circle_2);
        ::test_regions[counter].AddArea(circle_3);
        ::test_regions[counter].AddArea(circle_4);
        ::test_regions[counter].AddArea(circle_5);
        ::test_regions[counter].AddArea(circle_6);
        ::test_regions[counter].AddArea(circle_7);
        ::test_regions[counter].AddNegativeArea(exclusion_circle_1);
        ::test_regions[counter].AddNegativeArea(exclusion_circle_2);
        ::test_regions[counter].AddNegativeArea(exclusion_circle_3);
        ::test_regions[counter].AddNegativeArea(exclusion_circle_4);
        counter++;
    }
    while (counter < 5);

    local foo = test_regions[0].GetUnifiedAreas();
    /*
    foreach (tile in test_regions[0].GetUnifiedAreas()) {
        GSTile.DemolishTile(tile);
    }
    */

    delete ::test_regions
}

